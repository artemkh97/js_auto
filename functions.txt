Функции в JS

В целом понятно, что функции - это основные элементы в программе.
В JS много встроенных функций, мы с ними уже встречались. Ну и понятноее дело, можно создавать свои. 
Делать это можно несколькими способами, думаю, мы все рассмотрим.

Для создания функций мы используем объявление функции (function declaration). 

function showMessage() {
  console.log('Say Hi!')
}

То есть сначала идет ключевое слово function, потом название функции, потом круглые скобки (они могут быть пустые или в них можно передавать параметры) и само тело функции внутри фигурных скобок.
Тут отмечу, что есть некоторые правила для выбора имени функций

Функция – это действие. Поэтому имя функции обычно является глаголом. Оно должно быть кратким, точным и описывать действие функции, чтобы программист, который будет читать код, получил верное представление о том, что делает функция.
Как правило, используются глагольные префиксы, обозначающие общий характер действия, после которых следует уточнение. Обычно в командах разработчиков действуют соглашения, касающиеся значений этих префиксов.
Например, функции, начинающиеся с "show" обычно что-то показывают.

Функции, начинающиеся с…

"get…" – возвращают значение,
"calc…" – что-то вычисляют,
"create…" – что-то создают,
"check…" – что-то проверяют и возвращают логическое значение, и т.д.


Чтобы вызвать функцию, достаточно просто сделать следующее:
showMessage()

Немного поговорим про видимость:
У нас есть локальные и глобальные переменные.
Например, объявляя переменную внутри функции, она будет видна только внутри этой функции

У функции есть доступ к глобальным переменным, она может изменять их значение. Если есть 2 одинаковые переменные, одна глобальная, другая локальная, то локальная тут перекрывает глобальную. 
Насколько мне известно, глобальные переменные сейчас - это не good practice, но должен сказать, что в автотестах мы часто их используем. 

Теперь про функции с параметрами:
Параметры указываются в круглых скобках функции, их может быть сколько угодно и они могут передавать любую инфо

function simpleSum(a, b) {
	console.log(a + b)
}

Параметр – это переменная, указанная в круглых скобках в объявлении функции.
Аргумент – это значение, которое передаётся функции при её вызове.

Есди при вызове функции не указать аргумент, то он становится undefined. Мы можем задать значение по умолчанию и тогда, при вызове без аргумента, будет подставляться значение по умолчанию. 

Существует такое понятие, как "объекты первого рода (класса)" Это элементы, которые могут быть переданы в функции, возвращены из функций и присвоены переменным. 
К ним относятся любые данные, например числа, строки, массивы или логические значения. Но в JS к таким объектам относятся также и функции. 
Т.е. мы можем использовать одни функции в кажетсве аргументов других функций, присваивать значение функций константам или переменным, создавать функции внутри других функций и т.д.


Одна функция – одно действие
Функция должна делать только то, что явно подразумевается её названием. И это должно быть одним действием.

Два независимых действия обычно подразумевают две функции, даже если предполагается, что они будут вызываться вместе (в этом случае мы можем создать третью функцию, которая будет их вызывать).

Другой способ создания функций - function expression

let simpleSum = function(a, b) {
	console.log(a + b)
}

Различия между двумя способами объявления функций в том, когда функция создается. 
function expression создается тогда, когда поток выполнения достигнет правой части выражения ...
Только после этого функция считается созданной и может быть использована
Function declaration может быть вызвана раньше, чем объявлена. Тк движок сначала сканирует скрипт на наличие объявлений функций ,а потом выполняет. 


И, наконец, третий вариант созданий функций - стрелочные функции. 

Выглядит это следующим образом: 
 let sum = (a, b) => a + b;

 По сути, здесь стрелочка заменяет объявление function

 let sum = (a, b) => {    
  let result = a + b;
  return result; 
};


Есть еще один интересный вид функций в JS - callback functions.
Простыми словами: коллбэк — это функция, которая должна быть выполнена после того, как другая функция завершила выполнение (отсюда и название: callback — функция обратного вызова).

Благодаря этому, вместо того, чтобы ждать ответа для дальнейшего выполнения программы, JavaScript продолжит выполнение, одновременно ожидая других событий

const first = (callback) => {
  setTimeout(() => {
    console.log(1);
    callback();
  }, 500 );
};

const second = () => {
  console.log(2);
};

first(second);








































